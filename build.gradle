import java.nio.file.Files
import proguard.gradle.ProGuardTask

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.4.0'
	}
}

plugins {
	id 'java'
	id 'maven-publish'
	id 'checkstyle'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
}

version '2.4.0'
group 'org.quiltmc'

final ENV = System.getenv()
interface ExecProvider {
	@javax.inject.Inject
	ExecOperations getOperations()
}
final EXEC = objects.newInstance(ExecProvider).operations

version = version + (ENV.GITHUB_ACTIONS ? '' : '+local')

sourceSets {
	testInputs
}

repositories {
	mavenCentral()
	maven {
		name 'Quilt Repository'
		url 'https://maven.quiltmc.org/repository/release/'
	}
	maven {
		name 'Quilt Snapshots'
		url 'https://maven.quiltmc.org/repository/snapshot/'
	}
	mavenLocal()

	// Enigma dependencies
	maven {
		url 'https://maven.fabricmc.net/'
		content {
			includeModule('net.fabricmc', 'cfr')
		}
	}

	// Test inputs dependencies
	maven {
		name 'Minecraft Libraries'
		url 'https://libraries.minecraft.net'
	}
}

configurations {
	enigmaRuntime
}

dependencies {
	implementation libs.bundles.asm
	implementation libs.enigma
	implementation libs.quilt.json5
	implementation libs.tinylog
	implementation libs.annotations
	implementation libs.gson

	testImplementation libs.junit
	testImplementation libs.hamcrest
	testRuntimeOnly libs.junit.engine
	testImplementation libs.enigma.swing

	testInputsImplementation libs.dfu
	enigmaRuntime libs.dfu
}

var obfJar = file('build/obf/obf.jar')
var mappings = file('testMappings/')
var profile = file('build/resources/testInputs/profile.json')

tasks.register('testEnigma', JavaExec) {
	// dependsOn "obfuscateTestInputs", "processTestInputsResources"
	// TODO de-stringify
	dependsOn "completeTestObf", "processTestInputsResources"
	mainClass = "org.quiltmc.enigma.gui.Main"
	classpath = files(configurations.enigmaRuntime) + sourceSets.test.runtimeClasspath

	args('-jar', obfJar, '-mappings', mappings.getAbsolutePath(), '-profile', profile.getAbsolutePath(), '--development')
	doFirst {
		mappings.mkdirs()
	}
}

// tasks.register('testInputsJar', Jar) {
// 	from sourceSets.testInputs.output
//
// 	archiveFileName = "input.jar"
// 	destinationDirectory = file("build/obf")
// }
//
// tasks.register('obfuscateTestInputs', proguard.gradle.ProGuardTask) {
// 	dependsOn testInputsJar
//
// 	verbose
// 	injars testInputsJar
// 	outjars obfJar
//
// 	libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
// 	libraryjars sourceSets.testInputs.compileClasspath
//
// 	dontshrink()
// 	dontoptimize()
// 	keepclasseswithmembers 'public class * {\
// \t\tpublic static void main(java.lang.String[]);\
// \t}'
// 	keepattributes 'SourceFile'
// 	keepattributes '*Annotation*'
// 	keepattributes 'InnerClasses'
// 	keepattributes 'NestMembers'
// 	keepattributes 'EnclosingMethod'
// 	keepattributes 'Deprecated'
// 	keepattributes 'Signature'
// 	keepattributes 'Record'
// 	printmapping 'build/obf/obf.txt'
// }
//
// tasks.test.dependsOn obfuscateTestInputs, processTestInputsResources

static String convertToGradleTaskName(String name) {
	final length = name.length();

	if (length == 0) {
		throw new IllegalArgumentException("name must not be empty!");
	}

	final builder = new StringBuilder()

	final first = name.charAt(0)

	final underscore = (char) '_'
	if (first != underscore) {
		builder.append(Character.toLowerCase(first))
	}

	for (int i = 1; i < length; i++) {
		final c = name.charAt(i)
		if (c == underscore) {
			if (i < length - 1) {
				builder.append(Character.toUpperCase(name.charAt(++i)))
			}
		} else {
			builder.append(Character.toLowerCase(c))
		}
	}

	return builder.toString()
}

void registerTestJarTasks(String name, String... input) {
	final taskName = convertToGradleTaskName(name)
	final testJar = tasks.register("${taskName}TestJar", Jar.class) {
		group("test-setup")
		from(sourceSets.testInputs.output) {
			include input
		}

		archiveFileName = "${name}.jar"
		destinationDirectory = project.layout.buildDirectory.dir('test-inputs')
	}

	final testObf = tasks.register("${taskName}TestObf", ProGuardTask) {
		group("test-setup")

		final obfDest = project.layout.buildDirectory.dir('test-obf')

		verbose()
		injars testJar.flatMap { it.archiveFile }
		outjars obfDest.map { it.file("${name}-obf.jar") }

		libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
		libraryjars sourceSets.testInputs.compileClasspath

		dontshrink()
		dontoptimize()
		keepclasseswithmembers 'public class * {\
\t\tpublic static void main(java.lang.String[]);\
\t}'
		keepattributes 'SourceFile'
		keepattributes '*Annotation*'
		keepattributes 'InnerClasses'
		keepattributes 'NestMembers'
		keepattributes 'EnclosingMethod'
		keepattributes 'Deprecated'
		keepattributes 'Signature'
		keepattributes 'Record'
		printmapping obfDest.map { it.file("${name}-obf.txt") }
	}

	test.dependsOn(testObf)
}

final rootInputPackage = 'com/example'

registerTestJarTasks("complete", "${rootInputPackage}/**/*.class")

file("src/testInputs/java/${rootInputPackage}").listFiles().each {
	String input
	String name
	if (it.directory) {
		name = it.name
		input = "${rootInputPackage}/${name}/**/*.class"
	} else if (it.name.endsWith('.java')) {
		name = it.name.substring(0, it.name.length() - '.java'.length())
		input = "${rootInputPackage}/${name}*.class"
	} else {
		return
	}

	registerTestJarTasks(name, input)
}

registerTestJarTasks(
	"DELEGATE_PARAMETERS",
	"${rootInputPackage}/DelegateParametersTest*.class",
	"${rootInputPackage}/GetterSetterTest.class",
	"${rootInputPackage}/field_names/EnumTest.class",
)

static void replaceRegion(File file, String replacement, int start, int end) {
	file.text = replaceRegion(file.text, replacement, start, end)
}

static String replaceRegion(String string, String replacement, int start, int end) {
	return string.substring(0, start) + replacement + string.substring(end)
}

final qmapDest = layout.buildDirectory.dir('quilt-mappings')
tasks.register('setupQMap') {
	final projectVersion = project.version

	dependsOn publishToMavenLocal

	final execGit = { Action<ExecSpec> action ->
		final dest = qmapDest.get().asFile
		dest.mkdirs()

		EXEC.exec {
			workingDir dest
			executable 'git'
			action(it)
		}
	}

	inputs.property('projectVersion', projectVersion)
	outputs.tap {
		dir(qmapDest)
		upToDateWhen {
			final dest = qmapDest.get().asFile.toPath()
			if (!Files.exists(dest.resolve('.git'))) {
				return false
			}

			execGit { it.args 'fetch' }

			final localHash = new ByteArrayOutputStream()
			execGit {
				it.args 'rev-parse', 'HEAD'
				it.standardOutput = localHash
			}

			final originHash = new ByteArrayOutputStream()
			execGit {
				it.args 'rev-parse', 'origin/HEAD'
				it.standardOutput = originHash
			}

			return originHash.toString() == localHash.toString()
		}
	}

	doLast {
		final dest = qmapDest.get().asFile.toPath()

		if (Files.isDirectory(dest.resolve('.git'))) {
			execGit {
				it.args 'reset', '--hard', 'origin/HEAD'
			}
		} else {
			EXEC.exec {
				executable 'chmod'
				args '-Rf', '+w', dest
			}

			dest.deleteDir()

			execGit {
				it.args 'clone', 'https://github.com/QuiltMC/quilt-mappings', dest
			}
		}

		final versionsFile = dest.resolve('gradle/libs.versions.toml').toFile()
		final enigmaPlugin = 'enigma_plugin'
		final versionMatcher = versionsFile.text =~ /(?<=$enigmaPlugin = ").*(?=")/
		if (versionMatcher.find()) {
			replaceRegion(versionsFile, projectVersion.toString(), versionMatcher.start(), versionMatcher.end())
		} else {
			throw new GradleException("Cannot find $enigmaPlugin version.")
		}
	}
}

tasks.register('diffQMap') {
	dependsOn(setupQMap)

	final output = layout.buildDirectory.file('qmap.diff')
	outputs.file(output)

	doLast {
		EXEC.exec {
			workingDir(qmapDest.get().asFile)

			executable System.properties['os.name'].toLowerCase().contains('windows') ? './gradlew.bat' : './gradlew'

			args 'diffTarget', '--refresh-dependencies', '--dest', output.get().asFile
		}
	}
}

license {
	rule file('codeformat/FABRIC_MODIFIED_HEADER')
	rule file('codeformat/HEADER')

	include '**/*.java'
	exclude 'com/example/**/*.java'
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url = ENV.MAVEN_URL

				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_PASSWORD
				}
			}
		}
		mavenLocal()
	}
}
