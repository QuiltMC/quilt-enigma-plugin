{
    "$schema": "https://json-schema.org/draft-07/schema",
    "title": "Simple Type Field Names Registry",
    "description": "Definitions for the proposed names of \"simple\" types",
    "type": "object",
    "definitions": {
        "identifier": {
            "type": "string",
            "minLength": 1,
            "pattern": "(?:\\b[_a-zA-Z]|\\B\\$)[_$a-zA-Z0-9]*",
            "description": "A valid java identifier"
        },
        "name": {
            "description": "Names to use for a type",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "local_name": {
                            "$ref": "#/definitions/identifier",
                            "description": "The name to use for non-static-final fields and parameters. Should be in camelCase"
                        },
                        "static_name": {
                            "$ref": "#/definitions/identifier",
                            "description": "The name to use for static-final fields. Should be in UPPER_SNAKE_CASE"
                        }
                    },
                    "required": ["local_name"]
                },
                {
                    "$ref": "#/definitions/identifier"
                }
            ]
        },
        "entry": {
            "allOf": [{"$ref": "#/definitions/name"}],
            "properties": {
                "exclusive": {
                    "type": "boolean",
                    "description": "Whether the default name should be used if there's only a single entry using that name. Only applies if there is any fallback name"
                },
                "inherit": {
                    "oneOf": [
                        {
                            "type": "boolean",
                            "description": "Whether subclasses should inherit this simple type name."
                        },
                        {
                            "type": "object",
                            "description": "How to handle subclass naming.",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "The type of subclass name handling to perform. Must be the first property.",
                                    "enum": [ "NONE", "DIRECT", "TRUNCATED_SUBTYPE_NAME", "TRANSFORMED_SUBTYPE_NAME" ]
                                },
                                "suffix": {
                                    "type": "string",
                                    "description": "Only for TRUNCATED_SUBTYPE_NAME; used to recognize and truncate subclasses.",
                                    "minLength": 1
                                },
                                "pattern": {
                                    "type": "string",
                                    "description": "Only for TRANSFORMED_SUBTYPE_NAME; regex used to match subclasses.",
                                    "minLength": 1
                                },
                                "replacement": {
                                    "type": "string",
                                    "description": "Only for TRANSFORMED_SUBTYPE_NAME; replacement string used generate a name when \"pattern\" matches a subclass. May reference capturing groups defined in \"pattern\"."
                                }
                            },
                            "required": [ "type" ],
                            "if": { "properties": { "type": { "const": "TRUNCATED_SUBTYPE_NAME" }  } },
                            "then": { "required": [ "suffix" ] },
                            "else": {
                                "if": { "properties": { "type": { "const": "TRANSFORMED_SUBTYPE_NAME" } } },
                                "then": { "required": [ "pattern", "replacement" ] }
                            }
                        }
                    ]
                },
                "fallback": {
                    "type": "array",
                    "description": "Fallback names to use in case an entry with the default name already exists",
                    "items": {
                        "$ref": "#/definitions/name"
                    }
                }
            }
        }
    },
    "patternProperties": {
        "^.*$": {
            "$ref": "#/definitions/entry"
        }
    }
}
